import asyncio
import sqlite3

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove, CallbackQuery

from data.config import ADMINS
from keyboards.default.language import dating_ru, MainMenu_ru, Clothes_ru, Shopping_ru, finish_ru, location, BoshMenuRu
from keyboards.inline.manage_post import confirmation_keyboard_ru, post_callback, confirmation_keyboard
from loader import dp, db, bot
from states.shopProduct import ShopProduct, ShopProductRu
from utils.photograph import photo_link


@dp.message_handler(text='üá∑üá∫RU')
async def uzbek(message: types.Message):
    video_url = 'https://t.me/foto_va_mp3lar_olami_575/112'
    await message.answer_video(video=video_url, caption='üé•–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞',
                               reply_markup=dating_ru)


@dp.message_handler(text='‚úÖ –Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è –≤–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π')
@dp.message_handler(text='‚¨ÖÔ∏è–ù–∞–∑–∞–¥', state='*')
@dp.message_handler(text='/menu_ru', state='*')
@dp.message_handler(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', state='*')
async def dating_uz(message: types.Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: ',
                         reply_markup=MainMenu_ru)


@dp.message_handler(text='üëï–û–¥–µ–∂–¥–∞', state='*')
async def dating_uz(message: types.Message):
    await message.answer('–ú–µ–Ω—é –æ–¥–µ–∂–¥—ã: ', reply_markup=Clothes_ru)


@dp.message_handler(text='üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞', state='*')
async def murojaat(message: types.Message):
    await message.answer('–ù–∞—à –∞–¥–º–∏–Ω –¥–ª—è —Å–ø—Ä–∞–≤–æ–∫: @SHAXSWEAR_ADMIN')


# Id bo'yicha qidirish
@dp.message_handler(text='üîé–ü–æ–∏—Å–∫ –ø–æ id', state='*')
async def id_search(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.: \n\n'
                         '<i>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –µ–≥–æ –Ω–∞ '
                         '–Ω–∞—à–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ.</i> \n'
                         '<i>–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: <b>@SHAXSWEAR</b></i>',
                         reply_markup=ReplyKeyboardRemove())

    await ShopProductRu.id_searchRu.set()


@dp.message_handler(state=ShopProductRu.id_searchRu)
async def id_search(message: types.Message, state: FSMContext):
    id_product = message.text
    await state.update_data(
        {'id_product': id_product}
    )
    # id_product = int(id_product)
    try:
        product = db.select_product(id=id_product)
    except sqlite3.IntegrityError as err:
        await message.answer('–¢–∞–∫–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ!!!')
        await state.finish()
    await message.reply_photo(product[2], caption=f'üìåID –Ω–æ–º–µ—Ä: <b>{id_product}</b>\n\n'
                                                  f'‚úèÔ∏è–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{product[1]}</b>\n\n'
                                                  f'üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ: \n<b>{product[4]}</b>\n\n'
                                                  f'üíµ–¶–µ–Ω–∞: <b>{product[3]} —Å—É–º</b>\n\n'
                                                  f'üì≤–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à '
                                                  f'<a href=\'https://t.me/SHAXSWEAR\'>—Ç–µ–ª–µ–≥—Ä–∞–º–º</a> –∫–∞–Ω–∞–ª',
                              reply_markup=Shopping_ru)
    await ShopProductRu.next()


# kiyimlar menusining handlerlari
@dp.message_handler(text='ü•æ–ö—Ä–æ—Å—Å–æ–≤–∫–∏')
async def shoes(message: types.Message):
    products = db.select_all_products()
    i = 0
    for product in products:
        product_id = product[0]
        if product[1] == 'ü•æKrasovkalar':
            await message.answer_photo(product[2], caption=f'üìåID –Ω–æ–º–µ—Ä: <b>{product_id}</b>\n\n'
                                                           f'‚úèÔ∏è–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{product[1]}</b>\n\n'
                                                           f'üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ: \n<b>{product[4]}</b>\n\n'
                                                           f'üíµ–¶–µ–Ω–∞: <b>{product[3]} —Å—É–º</b>\n\n'
                                                           f'üì≤–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à '
                                                           f'<a href=\'https://t.me/SHAXSWEAR\'>—Ç–µ–ª–µ–≥—Ä–∞–º–º</a> –∫–∞–Ω–∞–ª')
            await asyncio.sleep(0.05)
            i += 1
    if i == 0:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')


@dp.message_handler(text='üëñ–¢–æ–ª—Å—Ç–æ–≤–∫–∞ –∏ –±—Ä—é–∫–∏')
async def shoes(message: types.Message):
    products = db.select_all_products()
    i = 0
    for product in products:
        product_id = product[0]
        if product[1] == 'üëñTolstovka va shalvar':
            await message.answer_photo(product[2], caption=f'üìåID –Ω–æ–º–µ—Ä: <b>{product_id}</b>\n\n'
                                                           f'‚úèÔ∏è–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{product[1]}</b>\n\n'
                                                           f'üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ: \n<b>{product[4]}</b>\n\n'
                                                           f'üíµ–¶–µ–Ω–∞: <b>{product[3]} —Å—É–º</b>\n\n'
                                                           f'üì≤–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à '
                                                           f'<a href=\'https://t.me/SHAXSWEAR\'>—Ç–µ–ª–µ–≥—Ä–∞–º–º</a> –∫–∞–Ω–∞–ª')
            await asyncio.sleep(0.05)
            i += 1
    if i == 0:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')


@dp.message_handler(text='üß¢–®–∞–ø–∫–∏')
async def shoes(message: types.Message):
    products = db.select_all_products()
    i = 0
    for product in products:
        product_id = product[0]
        if product[1] == 'üß¢Kepkalar':
            await message.answer_photo(product[2], caption=f'üìåID –Ω–æ–º–µ—Ä: <b>{product_id}</b>\n\n'
                                                           f'‚úèÔ∏è–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{product[1]}</b>\n\n'
                                                           f'üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ: \n<b>{product[4]}</b>\n\n'
                                                           f'üíµ–¶–µ–Ω–∞: <b>{product[3]} —Å—É–º</b>\n\n'
                                                           f'üì≤–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à '
                                                           f'<a href=\'https://t.me/SHAXSWEAR\'>—Ç–µ–ª–µ–≥—Ä–∞–º–º</a> –∫–∞–Ω–∞–ª')
            await asyncio.sleep(0.05)
            i += 1
    if i == 0:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')


@dp.message_handler(text='üß•–ö—É—Ä—Ç–∫–∏')
async def shoes(message: types.Message):
    products = db.select_all_products()
    i = 0
    for product in products:
        product_id = product[0]
        if product[1] == 'üß•Kurtkalar':
            await message.answer_photo(product[2], caption=f'üìåID –Ω–æ–º–µ—Ä: <b>{product_id}</b>\n\n'
                                                           f'‚úèÔ∏è–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{product[1]}</b>\n\n'
                                                           f'üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ: \n<b>{product[4]}</b>\n\n'
                                                           f'üíµ–¶–µ–Ω–∞: <b>{product[3]} —Å—É–º</b>\n\n'
                                                           f'üì≤–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à '
                                                           f'<a href=\'https://t.me/SHAXSWEAR\'>—Ç–µ–ª–µ–≥—Ä–∞–º–º</a> –∫–∞–Ω–∞–ª')
            await asyncio.sleep(0.05)
            i += 1
    if i == 0:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')


@dp.message_handler(text='üéí–°—É–º–∫–∏ –∏ —Ä—é–∫–∑–∞–∫–∏')
async def shoes(message: types.Message):
    products = db.select_all_products()
    i = 0
    for product in products:
        product_id = product[0]
        if product[1] == 'üéíSumka va ryukzaklar':
            await message.answer_photo(product[2], caption=f'üìåID –Ω–æ–º–µ—Ä: <b>{product_id}</b>\n\n'
                                                           f'‚úèÔ∏è–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{product[1]}</b>\n\n'
                                                           f'üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ: \n<b>{product[4]}</b>\n\n'
                                                           f'üíµ–¶–µ–Ω–∞: <b>{product[3]} —Å—É–º</b>\n\n'
                                                           f'üì≤–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à '
                                                           f'<a href=\'https://t.me/SHAXSWEAR\'>—Ç–µ–ª–µ–≥—Ä–∞–º–º</a> –∫–∞–Ω–∞–ª')
            await asyncio.sleep(0.05)
            i += 1
    if i == 0:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')


@dp.message_handler(text='–ö—É–ø–∏—Ç—å', state=ShopProductRu.shopRu)
async def xarid(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç: \n\n'
                         '<i>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ.!!!</i>',
                         reply_markup=ReplyKeyboardRemove())
    await ShopProductRu.next()


@dp.message_handler(state=ShopProductRu.colorRu)
async def color(message: types.Message, state: FSMContext):
    color_product = message.text
    await state.update_data(
        {'color': color_product}
    )
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä: \n\n'
                         '<i>–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–∞.!!!</i>')
    await ShopProductRu.next()


@dp.message_handler(state=ShopProductRu.sizeRu)
async def size(message: types.Message, state: FSMContext):
    size_product = message.text
    await state.update_data(
        {'size': size_product}
    )
    await message.answer('üî¢–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?: ')
    await ShopProductRu.next()


@dp.message_handler(state=ShopProductRu.amountRu)
async def amount(message: types.Message, state: FSMContext):
    amount_p = message.text
    await state.update_data(
        {'amount': amount_p}
    )
    await message.answer('üìù –í–µ–¥–∏—Ç–µ –í–∞—à –§.–ò.–û.: ')
    await ShopProductRu.next()


@dp.message_handler(state=ShopProductRu.full_nameRu)
async def name(message: types.Message, state: FSMContext):
    full_name = message.text
    await state.update_data(
        {'name': full_name}
    )
    await message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å: ')
    await ShopProductRu.next()


@dp.message_handler(state=ShopProductRu.addressRu)
async def address(message: types.Message, state: FSMContext):
    address_user = message.text
    await state.update_data(
        {'address': address_user}
    )
    await message.answer('üìç–û—Ç–±—Ä–æ—Å—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: \n\n'
                         '<i>–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É location –Ω–∏–∂–µ.</i>', reply_markup=location)
    await ShopProductRu.next()


@dp.message_handler(content_types='location', state=ShopProductRu.locationRu)
async def location_user(message: types.Message, state: FSMContext):
    location = message.location
    await state.update_data(
        {'latitude': location.latitude,
         'longitude': location.longitude}
    )
    await message.answer('üì≤–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ', reply_markup=ReplyKeyboardRemove())
    await ShopProductRu.next()


@dp.message_handler(state=ShopProductRu.phone_numRu)
async def phone(message: types.Message, state: FSMContext):
    phone_num = message.text
    await state.update_data(
        {'phone_num': phone_num}
    )
    await message.answer('üí≥–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 5440810005838189\n'
                         'üßë‚Äçüíª–§.–ò.–û: SANJAR PULATOV', reply_markup=finish_ru)
    await ShopProductRu.next()


@dp.message_handler(text='‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', state=ShopProductRu.paymentRu)
async def payment(message: types.Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —á–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏: ',
                         reply_markup=ReplyKeyboardRemove())
    await ShopProductRu.next()


@dp.message_handler(content_types='photo', state=ShopProductRu.photo_paymentRu)
async def enter_message(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    link = await photo_link(photo)
    mention = message.from_user.get_mention()
    await message.answer('‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –Ω–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–≤—è–∂—É—Ç—Å—è —Å–≤–∞–º–∏')
    await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫—É –∏ –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∞–º. –ü—É—Å—Ç—å –í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç —É–¥–∞—á–Ω–æ–π üòä ',
                         reply_markup=BoshMenuRu)
    data = await state.get_data()
    id_product = data.get("id_product")
    color_product = data.get("color")
    size_product = data.get("size")
    amount_product = data.get('amount')
    full_name = data.get('name')
    address_user = data.get("address")
    phone_num = data.get("phone_num")
    loc_lat = data.get('latitude')
    loc_long = data.get('longitude')

    msg = f'üìåId raqam: <b>{id_product}</b>\n\n'
    msg += f'Rangi: <b>{color_product}</b>\n\n'
    msg += f'O\'lchami: <b>{size_product}</b>\n\n'
    msg += f'Soni: <b>{amount_product}</b>\n\n'
    msg += f'F.I.Sh: <b>{full_name}</b>\n\n'
    msg += f'Manzili: <b>{address_user}</b>\n\n'
    msg += f'Telefon raqami: <b>{phone_num}</b>'

    await state.finish()
    await bot.send_message(ADMINS[1], f"Foydalanuvchi {mention} quyidagi mahsulotni sotib oldi. Chekni tekshiring.\n\n")
    await bot.send_photo(ADMINS[1],
                         photo=link,
                         caption=msg,
                         reply_markup=confirmation_keyboard)
    await bot.send_location(ADMINS[1],
                            latitude=loc_lat,
                            longitude=loc_long)


@dp.callback_query_handler(post_callback.filter(action="cancel"), state=ShopProductRu.to_adminRu)
async def cancel_post(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_reply_markup()
    await call.message.answer("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")


@dp.message_handler(state=ShopProductRu.to_adminRu)
async def post_unknown(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å‚òùÔ∏è‚òùÔ∏è‚òùÔ∏è")
